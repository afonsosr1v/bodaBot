# swagger.yml

openapi: 3.0.0
info:
  title: "RP Flask REST API"
  description: "An API about people and notes"
  version: "1.0.0"

servers:
  - url: "/api"

components:
  schemas:
    Review:
      type: "object"
      additionalProperties: false
      required:
        - artista
        - album
        - score
        - review
      properties:
#       reviewID:
#         type: "string"
#         maxLength: 20
#         pattern: ^[a-zA-Z 0-9]*$
#        userID: 
#          type: "string"
#          maxLength: 20
#          pattern: ^[a-zA-Z 0-9]*$
#          description: "ID de discord do reviewer"
#        serverID: 
#          type: "string"
#          maxLength: 20
#          pattern: ^[a-zA-Z 0-9]*$
#          description: "ID do server do discord do reviewer"
        artista: 
          type: "string"
          maxLength: 20
          pattern: ^[a-zA-Z 0-9]*$
          description: "artista"
        album:
          type: "string"
          maxLength: 20
          pattern: ^[a-zA-Z 0-9]*$
          description: "album"
#        albumImage: 
#          type: "string"
#          maxLength: 200
#          pattern: ^[]*$
#          description: "URL da imagem do album googleimagesAPI"
        score:
          type: "string"
          maxLength: 1
          pattern: ^[0-9]*$
          description: "score de 0 a 10"
        review:
          type: "string"
          maxLength: 200
          pattern: ^[a-zA-Z 0-9]*$
          description: "corpo da review"
  parameters:
    userID:
      name: "userID"
      description: "ID do reviewer"
      in: path
      required: true
      schema:
        type: "string"
    reviewID:
      name: "reviewID"
      description: "ID da review"
      in: path
      required: true
      schema:
        type: "string"

paths:
  /users:
    get:
      operationId: "user.read_all"
      tags:
        - "Users"
      summary: "Read all users"
      responses:
        "200":
          description: "Successfully read all users"
  /users+reviews:
    get:
      operationId: "user.read_all_with_reviews"
      tags:
        - "Users + Reviews"
      summary: "Read all users with they're reviews"
      responses:
        "200":
          description: "Successfully read all users and reviews"
  /users/{userID}:
    get:
        operationId: "user.read_userID"
        tags:
          - User
        summary: "Let user por ID"
        parameters:
          - $ref: "#/components/parameters/userID"
        responses:
          "200":
            description: "Leu user por ID com sucesso"
  /users/{userID}/reviews:
    get:
        operationId: "user.read_user_reviews"
        tags:
          - User
          - Review
        summary: "Let reviews do user"
        parameters:
          - $ref: "#/components/parameters/userID"
        responses:
          "200":
            description: "Leu reviews do user com sucesso"
  /reviews:
    get:
      operationId: "review.read_all"
      tags:
        - "Reviews"
      summary: "Read all reviews"
      responses:
        "200":
          description: "Successfully read reviews"
    post:
      operationId: "review.create"
      tags:
        - Review
      summary: "Create a review"
      requestBody:
        description: "Review to create"
        required: True
        content:
          application/json:
            schema:
              x-body-name: "review"
              $ref: "#/components/schemas/Review"
      responses:
        "201":
          description: "Successfully created Review"
  /reviews/{reviewID}:
    get:
      operationId: "review.read_reviewID"
      tags:
        - Review
      summary: "Let review por ID"
      parameters:
        - $ref: "#/components/parameters/reviewID"
      responses:
        "200":
          description: "Leu review por ID com sucesso"
    delete:
      tags:
        - Review
      operationId: "review.delete"
      summary: "Apagar review"
      parameters:
        - $ref: "#/components/parameters/reviewID"
      responses:
        "204":
          description: "Review apagada com sucesso"